<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="edu.jsu.mcis.ArgumentParserTest" tests="37" skipped="0" failures="1" errors="0" timestamp="2014-12-02T20:00:33" hostname="Sari" time="0.078">
  <properties/>
  <testcase name="testAddMultipleArguments" classname="edu.jsu.mcis.ArgumentParserTest" time="0.015"/>
  <testcase name="testGetNumberValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testAddArgDescriptions" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testCatchWrongDataTypeForBoolean" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOutputXML" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testaddRestrictedOptionalArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testRequiredOptionalArguments" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testShortName" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOptionalArgumentAsFlag" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testaddRestrictedArgumentValuesWithInvalidType" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testXMLFileWriting" classname="edu.jsu.mcis.ArgumentParserTest" time="0.032"/>
  <testcase name="testParseRestrictedArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOptionalArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testTooManyArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testSetRequiredOptionalArguments" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testReadingOptionalArgumentAtEnd" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOptionalArgumentsWithDefaults" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testParsingRestricted" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testReadingMoreOptionalArguments" classname="edu.jsu.mcis.ArgumentParserTest" time="0.015"/>
  <testcase name="testParseVolCalc" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testMultipleValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testaddRestrictedOptionalArgumentValuesWithInvalidType" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testDataTypeParsing" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testCatchWrongDataTypeForInteger" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOptionText" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testMutualGroups" classname="edu.jsu.mcis.ArgumentParserTest" time="0.016">
    <failure message="org.junit.ComparisonFailure: expected:&lt;[[type, al]]&gt; but was:&lt;[[&#13;&#10;&#9;&lt;optionalArgument&gt;&#13;&#10;&#9;&#9;&lt;name&gt;type&lt;/name&gt;&#13;&#10;&#9;&#9;&lt;numValues&gt;0&lt;/numValues&gt;&#13;&#10;&#9;&#9;&lt;type&gt;String&lt;/type&gt;&#13;&#10;&#9;&#9;&lt;description&gt;&lt;/description&gt;&#13;&#10;&#9;&#9;&lt;value&gt;null&lt;/value&gt;&#13;&#10;&#9;&#9;&lt;shortName&gt;&lt;/shortName&gt;&#13;&#10;&#9;&lt;/optionalArgument&gt;, &#13;&#10;&#9;&lt;optionalArgument&gt;&#13;&#10;&#9;&#9;&lt;name&gt;al&lt;/name&gt;&#13;&#10;&#9;&#9;&lt;numValues&gt;0&lt;/numValues&gt;&#13;&#10;&#9;&#9;&lt;type&gt;String&lt;/type&gt;&#13;&#10;&#9;&#9;&lt;description&gt;&lt;/description&gt;&#13;&#10;&#9;&#9;&lt;value&gt;null&lt;/value&gt;&#13;&#10;&#9;&#9;&lt;shortName&gt;&lt;/shortName&gt;&#13;&#10;&#9;&lt;/optionalArgument&gt;]]&gt;" type="org.junit.ComparisonFailure">org.junit.ComparisonFailure: expected:&lt;[[type, al]]&gt; but was:&lt;[[
	&lt;optionalArgument&gt;
		&lt;name&gt;type&lt;/name&gt;
		&lt;numValues&gt;0&lt;/numValues&gt;
		&lt;type&gt;String&lt;/type&gt;
		&lt;description&gt;&lt;/description&gt;
		&lt;value&gt;null&lt;/value&gt;
		&lt;shortName&gt;&lt;/shortName&gt;
	&lt;/optionalArgument&gt;, 
	&lt;optionalArgument&gt;
		&lt;name&gt;al&lt;/name&gt;
		&lt;numValues&gt;0&lt;/numValues&gt;
		&lt;type&gt;String&lt;/type&gt;
		&lt;description&gt;&lt;/description&gt;
		&lt;value&gt;null&lt;/value&gt;
		&lt;shortName&gt;&lt;/shortName&gt;
	&lt;/optionalArgument&gt;]]&gt;
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at edu.jsu.mcis.ArgumentParserTest.testMutualGroups(ArgumentParserTest.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
</failure>
  </testcase>
  <testcase name="testAddProgram" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testaddRestrictedArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testParseSingleArgument" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testParseRestrictedOptionalArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOptionalArgumentDescription" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testAddArgDataTypes" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testGetOptionalArgumentDataType" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testSetDefaultValue" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testCatchWrongDataTypeForFloat" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testOptionalArgumentOverrideDefaultValue" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <testcase name="testNotEnoughArgumentValues" classname="edu.jsu.mcis.ArgumentParserTest" time="0.0"/>
  <system-out><![CDATA[usage: java null length width height 
null
Positional Arguments:
length string		
width string		
height string		

Optional Arguments:
help boolean		
type string		
actor string		

usage: java VolCalc length width height 
Calculate the volume of a box
Positional Arguments:
length integer		the length of the box
width float		the width of the box
height float		the height of the box

Optional Arguments:
help boolean		

<?xml version="1.0" encoding="UTF-8"?>
<arguments>
	<optionalArgument>
		<name>help</name>
		<numValues>0</numValues>
		<type>Boolean</type>
		<description></description>
		<value>null</value>
		<shortName>h</shortName>
	</optionalArgument>
	<argument>
		<name>length</name>
		<type>String</type>
		<description></description>
	</argument>
	<argument>
		<name>width</name>
		<type>String</type>
		<description></description>
	</argument>
	<argument>
		<name>height</name>
		<type>String</type>
		<description></description>
	</argument>
</arguments>
<?xml version="1.0" encoding="UTF-8"?>
<arguments>
	<optionalArgument>
		<name>help</name>
		<numValues>0</numValues>
		<type>Boolean</type>
		<description></description>
		<value>null</value>
		<shortName>h</shortName>
	</optionalArgument>
	<argument>
		<name>length</name>
		<type>String</type>
		<description></description>
	</argument>
	<argument>
		<name>width</name>
		<type>String</type>
		<description></description>
	</argument>
	<argument>
		<name>height</name>
		<type>String</type>
		<description></description>
	</argument>
</arguments>
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
